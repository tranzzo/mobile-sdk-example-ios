// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name TranzzoPaymentSDK
import AnyFormatKit
import DeveloperToolsSupport
import Foundation
import OwlKit
import PassKit
import PayCardsRecognizer
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum PaymentStatus : Swift.String, Swift.Codable {
  case pending
  case failure
  case success
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PaymentInfoResponse : Swift.Codable {
  public let paymentID: Swift.String?
  public let orderID: Swift.String?
  public let gatewayOrderID: Swift.String?
  public let billingOrderID: Swift.String?
  public let transactionID: Swift.String?
  public let posID: Swift.String?
  public let mode: Swift.String?
  public let method: Swift.String?
  public let amount: Foundation.Decimal?
  public let currency: Swift.String?
  public let description: Swift.String?
  public let status: TranzzoPaymentSDK.PaymentStatus
  public let statusCode: Swift.String?
  public let statusDescription: Swift.String?
  public let userActionRequired: Swift.Bool?
  public let userActionURL: Swift.String?
  public let eci: Swift.String?
  public let mcc: Swift.String?
  public let options3Ds: Swift.String?
  public let ccMask: Swift.String?
  public let ccToken: Swift.String?
  public let ccTokenExpiration: Swift.String?
  public let customerID: Swift.String?
  public let customerIP: Swift.String?
  public let customerFname: Swift.String?
  public let customerLname: Swift.String?
  public let customerEmail: Swift.String?
  public let customerPhone: Swift.String?
  public let customerCountry: Swift.String?
  public let resultURL: Swift.String?
  public let createdAt: Swift.String?
  public let processingTime: Swift.String?
  public let payload: Swift.String?
  public let bankShortName: Swift.String?
  public let customerUserAgent: Swift.String?
  public let customerCity: Swift.String?
  public let rrn: Swift.String?
  public let authCode: Swift.String?
  public let dcc: Swift.String?
  public let otpURL: Swift.String?
  public let makePaymentDescription: Swift.String?
  public let customerBirthday: Swift.String?
  public let payway: Swift.String?
  public let customerPatronym: Swift.String?
  public let terminalName: Swift.String?
  public let recipientCcToken: Swift.String?
  public let recipientCcMask: Swift.String?
  public let dccRates: Swift.String?
  public let trafficSource: Swift.String?
  public let gateway: Swift.String?
  public let paymentSystem: Swift.String?
  public let entityId: Swift.String?
  public let externalTerminalName: Swift.String?
  public let recipientEmail: Swift.String?
  public let recipientPhone: Swift.String?
  public let recipientFname: Swift.String?
  public let recipientLname: Swift.String?
  public let recipientPatronym: Swift.String?
  public let merchantOrderId: Swift.String?
  public let receiptUrl: Swift.String?
  public let processedAmount: Foundation.Decimal?
  public let processedCurrency: Swift.String?
  public let comment: Swift.String?
  public let registryRefNo: Swift.String?
  public let processedAt: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TokenCardModel {
  public var mask: Swift.String
  public var token: Swift.String
  public var isDefault: Swift.Bool
  public init(mask: Swift.String, token: Swift.String, isDefault: Swift.Bool)
}
public struct PaymentsConfig {
  public enum Environment {
    case sandbox
    case production
    public static func == (a: TranzzoPaymentSDK.PaymentsConfig.Environment, b: TranzzoPaymentSDK.PaymentsConfig.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var environment: TranzzoPaymentSDK.PaymentsConfig.Environment
  public var currency: Swift.String
  public var applePay: TranzzoPaymentSDK.ApplePayConfig?
  public var enableLogging: Swift.Bool
  public init(environment: TranzzoPaymentSDK.PaymentsConfig.Environment, currency: Swift.String, applePay: TranzzoPaymentSDK.ApplePayConfig? = nil, enableLogging: Swift.Bool = false)
}
public struct ApplePayConfig {
  public init(merchantId: Swift.String, countryCode: Swift.String)
}
public protocol PostRequest : TranzzoPaymentSDK.BaseRequestProtocol {
  var bodyParameters: Foundation.Data { get set }
}
public enum PaymentMethodType : Swift.String, Swift.Codable {
  case auth
  case purchase
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Payment3dsBypassType : Swift.String, Swift.Codable {
  case supported
  case always
  case never
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AdditionalData {
  public let method: TranzzoPaymentSDK.PaymentMethodType?
  public let payment3dsBypass: TranzzoPaymentSDK.Payment3dsBypassType?
  public let serverUrl: Swift.String?
  public let products: [TranzzoPaymentSDK.Product]?
  public let merchantMcc: Swift.String?
  public let payload: [Swift.String : Swift.String]?
  public init(method: TranzzoPaymentSDK.PaymentMethodType, payment3dsBypass: TranzzoPaymentSDK.Payment3dsBypassType?, serverUrl: Swift.String?, products: [TranzzoPaymentSDK.Product]?, merchantMcc: Swift.String?, payload: [Swift.String : Swift.String]?)
}
public struct KeyConfig {
  public let sessionToken: Swift.String
  public let apiKey: Swift.String
  public let posId: Swift.String
  public init(sessionToken: Swift.String, apiKey: Swift.String, posId: Swift.String)
}
public protocol PaymentType {
}
public struct FixedAmountPaymentType : TranzzoPaymentSDK.PaymentType {
  public var orderId: Swift.String
  public var amount: Swift.Double
  public var description: Swift.String
  public var tokenCards: [TranzzoPaymentSDK.TokenCardModel]?
  public init(orderId: Swift.String, amount: Swift.Double, description: Swift.String, tokenCards: [TranzzoPaymentSDK.TokenCardModel]? = nil)
}
public struct AnyAmountPaymentType : TranzzoPaymentSDK.PaymentType {
  public var orderId: Swift.String
  public var description: Swift.String
  public var proposedAmounts: [Swift.Double]?
  public var tokenCards: [TranzzoPaymentSDK.TokenCardModel]?
  public init(orderId: Swift.String, description: Swift.String, proposedAmounts: [Swift.Double]? = nil, tokenCards: [TranzzoPaymentSDK.TokenCardModel]? = nil)
}
public protocol TranzzoPaymentDelegate : AnyObject {
  func paymentSuccess(_ results: TranzzoPaymentSDK.PaymentInfoResponse)
  func paymentFailed(_ error: TranzzoPaymentSDK.TranzzoError)
  func paymentCanceled()
}
@_hasMissingDesignatedInitializers public class TranzzoPaymentSDK {
  public static func setConfig(paymentConfig: TranzzoPaymentSDK.PaymentsConfig, uiConfig: TranzzoPaymentSDK.PaymentContollerConfig? = nil)
  public static func makePayment(rootController: UIKit.UIViewController, delegate: any TranzzoPaymentSDK.TranzzoPaymentDelegate, paymentData: TranzzoPaymentSDK.PaymentData)
  @objc deinit
}
public protocol NetworkingManagerProtocol {
  func sendRequest(request: any TranzzoPaymentSDK.BaseRequestProtocol, completionBlock: @escaping (_ response: TranzzoPaymentSDK.BaseResponse) -> ())
}
public struct PaymentData {
  public var type: any TranzzoPaymentSDK.PaymentType
  public var keyConfig: TranzzoPaymentSDK.KeyConfig
  public var customerData: TranzzoPaymentSDK.CustomerData
  public var additionalData: TranzzoPaymentSDK.AdditionalData?
  public init(type: any TranzzoPaymentSDK.PaymentType, keyConfig: TranzzoPaymentSDK.KeyConfig, customerData: TranzzoPaymentSDK.CustomerData, additionalData: TranzzoPaymentSDK.AdditionalData? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ConstraintWithKeyboardObserver : UIKit.NSLayoutConstraint {
  @_Concurrency.MainActor(unsafe) public var additionalIndent: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
}
public protocol BaseRequestProtocol {
  var path: Swift.String { get }
  var urlParameters: [Swift.String : Any] { get }
  var requestUrl: Swift.String? { get }
}
public protocol GetRequest : TranzzoPaymentSDK.BaseRequestProtocol {
}
public enum ProductPriceType : Swift.String, Swift.Codable {
  case vat
  case net
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ProductUnitType : Swift.String, Swift.Codable {
  case kg
  case m
  case pc
  case l
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ProductTaxeType : Swift.String, Swift.Codable {
  case vat
  case nonVat
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Product : Swift.Codable {
  public let id: Swift.String?
  public let url: Swift.String?
  public let category: Swift.String?
  public let name: Swift.String?
  public let description: Swift.String?
  public let amount: Foundation.Decimal?
  public let currency: Swift.String?
  public let priceType: TranzzoPaymentSDK.ProductPriceType?
  public let vat: Foundation.Decimal?
  public let qty: Foundation.Decimal?
  public let payload: Swift.String?
  public let customerEmail: Swift.String?
  public let unit: TranzzoPaymentSDK.ProductUnitType?
  public let taxes: [TranzzoPaymentSDK.ProductTaxe]?
  public init(id: Swift.String?, url: Swift.String?, category: Swift.String?, name: Swift.String?, description: Swift.String?, amount: Foundation.Decimal?, currency: Swift.String?, priceType: TranzzoPaymentSDK.ProductPriceType?, vat: Foundation.Decimal?, qty: Foundation.Decimal?, payload: Swift.String?, customerEmail: Swift.String?, unit: TranzzoPaymentSDK.ProductUnitType?, taxes: [TranzzoPaymentSDK.ProductTaxe]?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProductTaxe : Swift.Codable {
  public let type: TranzzoPaymentSDK.ProductTaxeType
  public let prc: Foundation.Decimal
  public init(type: TranzzoPaymentSDK.ProductTaxeType, prc: Foundation.Decimal)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentContollerConfig {
  public var colorConfig: TranzzoPaymentSDK.ColorConfig
  public var localizationConfig: TranzzoPaymentSDK.LocalizationConfig
  public init(colorConfig: TranzzoPaymentSDK.ColorConfig, localizationConfig: TranzzoPaymentSDK.LocalizationConfig)
}
public struct ColorConfig {
  public var pay_button_enable_color: UIKit.UIColor
  public var pay_button_disabled_color: UIKit.UIColor
  public var fixed_amount_color: UIKit.UIColor
  public var background_color: UIKit.UIColor
  public var section_backround_color: UIKit.UIColor
  public var border_color: UIKit.UIColor
  public var selected_token_card_element_border_color: UIKit.UIColor
  public var placeholder_color: UIKit.UIColor
  public var title_color: UIKit.UIColor
  public var input_color: UIKit.UIColor
  public var error_color: UIKit.UIColor
  public init()
}
public struct LocalizationConfig {
  public var main_title: Swift.String
  public var enter_amount_title: Swift.String
  public var enter_amount_placeholder: Swift.String
  public var pay_via_card_title: Swift.String
  public var pay_button_title: Swift.String
  public var wrong_card_data_title: Swift.String
  public var card_number_placeholder: Swift.String
  public var card_exp_month_placeholder: Swift.String
  public var card_exp_year_plaecholder: Swift.String
  public var card_cvv_placeholder: Swift.String
  public var cancel_payment_title: Swift.String
  public var cancel_payment_description: Swift.String
  public var cancel_payment_confirm: Swift.String
  public var cancel_payment_cancel: Swift.String
  public var saved_cards_list_title: Swift.String
  public var other_card_title: Swift.String
  public var choose_token_cards_title: Swift.String
  public init()
}
public enum ErrorType {
  case clientError
  case serverError
  case frameworkError
  public static func == (a: TranzzoPaymentSDK.ErrorType, b: TranzzoPaymentSDK.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TranzzoError {
  public let message: Swift.String
  public let httpCode: Swift.Int?
  public let type: TranzzoPaymentSDK.ErrorType
}
public struct CustomerData {
  public init(customerEmail: Swift.String, customerPhone: Swift.String, customerId: Swift.String? = nil, customerFname: Swift.String? = nil, customerLname: Swift.String? = nil, customerLang: Swift.String? = nil, customerCountry: Swift.String? = nil)
}
public struct BaseResponse {
}
extension TranzzoPaymentSDK.PaymentStatus : Swift.Equatable {}
extension TranzzoPaymentSDK.PaymentStatus : Swift.Hashable {}
extension TranzzoPaymentSDK.PaymentStatus : Swift.RawRepresentable {}
extension TranzzoPaymentSDK.PaymentsConfig.Environment : Swift.Equatable {}
extension TranzzoPaymentSDK.PaymentsConfig.Environment : Swift.Hashable {}
extension TranzzoPaymentSDK.PaymentMethodType : Swift.Equatable {}
extension TranzzoPaymentSDK.PaymentMethodType : Swift.Hashable {}
extension TranzzoPaymentSDK.PaymentMethodType : Swift.RawRepresentable {}
extension TranzzoPaymentSDK.Payment3dsBypassType : Swift.Equatable {}
extension TranzzoPaymentSDK.Payment3dsBypassType : Swift.Hashable {}
extension TranzzoPaymentSDK.Payment3dsBypassType : Swift.RawRepresentable {}
extension TranzzoPaymentSDK.ProductPriceType : Swift.Equatable {}
extension TranzzoPaymentSDK.ProductPriceType : Swift.Hashable {}
extension TranzzoPaymentSDK.ProductPriceType : Swift.RawRepresentable {}
extension TranzzoPaymentSDK.ProductUnitType : Swift.Equatable {}
extension TranzzoPaymentSDK.ProductUnitType : Swift.Hashable {}
extension TranzzoPaymentSDK.ProductUnitType : Swift.RawRepresentable {}
extension TranzzoPaymentSDK.ProductTaxeType : Swift.Equatable {}
extension TranzzoPaymentSDK.ProductTaxeType : Swift.Hashable {}
extension TranzzoPaymentSDK.ProductTaxeType : Swift.RawRepresentable {}
extension TranzzoPaymentSDK.ErrorType : Swift.Equatable {}
extension TranzzoPaymentSDK.ErrorType : Swift.Hashable {}
